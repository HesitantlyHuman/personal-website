---
import { cn } from "@lib/utils";
import { getURL } from "@utils/url";

const { collapsible } = Astro.props;
const { $id } = Astro.locals;

const buttonId = $id("theme-button");
---

<button
    id={buttonId}
    aria-label={`Toggle light and dark theme`}
    class={cn(
        collapsible && "hidden md:flex",
        "size-9 rounded-full p-2 items-center justify-center",
        "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
        "stroke-current hover:stroke-black hover:dark:stroke-white",
        "border border-black/10 dark:border-white/25",
    )}
>
    <svg class="size-full block dark:hidden">
        <use href={getURL("ui.svg#sun")}></use>
    </svg>
    <svg class="size-full hidden dark:block">
        <use href={getURL("ui.svg#moon")}></use>
    </svg>
</button>

<script is:inline define:vars={{ buttonId }}>
    var themeButton;

    function initializeThemeButton() {
        themeButton = document.getElementById(buttonId);
        themeButton?.addEventListener("click", changeTheme);
    }

    function changeTheme() {
        const element = document.documentElement;
        const theme = element.classList.contains("dark") ? "light" : "dark";

        const css = document.createElement("style");

        css.appendChild(
            document.createTextNode(
                `* {
           -webkit-transition: none !important;
           -moz-transition: none !important;
           -o-transition: none !important;
           -ms-transition: none !important;
           transition: none !important;
        }`,
            ),
        );
        document.head.appendChild(css);

        if (theme === "dark") {
            element.classList.add("dark");
        } else {
            element.classList.remove("dark");
        }

        window.getComputedStyle(css).opacity;
        document.head.removeChild(css);
        localStorage.theme = theme;
    }

    initializeThemeButton();
    document.addEventListener("astro:page-load", initializeThemeButton);
</script>
