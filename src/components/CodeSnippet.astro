---
const { $id } = Astro.locals;

import { getURL } from "@utils/url";

const meta: Record<string, string> = {};
const {
  "data-meta": meta_string,
  "data-code": code_encoded,
  ...props
} = Astro.props;

if (meta_string) {
  const regex = /(\w+)=("[^"]*"|\S+)/g;
  let match;
  while ((match = regex.exec(meta_string)) !== null) {
    const key = match[1];
    let value = match[2];

    // Remove surrounding quotes if present
    if (value.startsWith('"') && value.endsWith('"')) {
      value = value.slice(1, -1);
    }

    meta[key] = value;
  }
}

var caption = meta.caption;
const link = meta.link;
var lines_start = !isNaN(Number(meta?.lines_start))
  ? Number(meta.lines_start) - 1
  : meta?.lines_start;

// Check if the link is a GitHub snippet/permalink
if (link && typeof link === "string") {
  const githubSnippetRegex =
    /https:\/\/github\.com\/[^\/]+\/[^\/]+\/blob\/[a-f0-9]+\/([^#]+)#L(\d+)(-L(\d+))?/;
  const match = link.match(githubSnippetRegex);
  if (match) {
    const fileNameFromLink = match[1];
    const startLineFromLink = Number(match[2]) - 1;

    // If caption not set, use filename
    if (!caption) {
      caption = fileNameFromLink;
    }

    // If lines_start not set, use start line
    if (
      lines_start === undefined ||
      lines_start === null ||
      lines_start === ""
    ) {
      lines_start = startLineFromLink;
    }
  }
}

function parseBool(value: string) {
  if (value == null) return true;

  const str = String(value).toLowerCase();
  if (["off", "disable", "false", "no", "f", "n", "0"].includes(str))
    return false;

  // default fallback
  return true;
}

const copy = parseBool(meta.copy);
const copy_ui_id = copy ? $id("copy-button") : undefined;

// Somewhere along the line, the properties are getting encoded in a way which
// does not preserve whitespace. See astro.config.mjs
const code_text = JSON.parse(code_encoded);

// Now, determine if we need the figure header or not
const header = copy || caption || link;
---

<figure
  class="m-0 mb-8 border rounded-md border-black/15 dark:border-neutral-700 overflow-hidden bg-neutral-50 dark:bg-neutral-950"
>
  {
    header && (
      <figcaption class="flex text-sm min-h-10 justify-between items-center p-0 m-0 border-b border-black/15 dark:border-neutral-700 leading-normal bg-neutral-200 dark:bg-neutral-800">
        {caption && link && (
          <a
            href={link}
            class="no-underline text-black/60 dark:text-white/60 hover:text-black/80 hover:dark:text-white/80 flex items-center p-2 px-4 gap-2 snippet-link fill-black/60 dark:fill-white/60 hover:fill-black/80 hover:dark:fill-white/80"
            aria-label="snippet-link"
            target="_blank"
            rel="noopener noreferrer alternate"
          >
            <svg class="size-3.5">
              <use href={getURL("ui.svg#link")} />
            </svg>
            <p class="m-0">{caption}</p>
          </a>
        )}
        {caption && !link && (
          <p class="p-2 px-4 m-0 text-black/60 dark:text-white/60">{caption}</p>
        )}
        {!caption && link && (
          <a
            href={link}
            class="no-underline flex p-2 px-4 snippet-link fill-black/60 dark:fill-white/60 hover:fill-black/80 hover:dark:fill-white/80"
            aria-label="snippet-link"
            target="_blank"
            rel="noopener noreferrer alternate"
          >
            <svg class="size-3.5">
              <use href={getURL("ui.svg#link")} />
            </svg>
          </a>
        )}
        {!caption && !link && <div />}

        {copy && (
          <div class="flex flex-row items-center gap-1" id={copy_ui_id}>
            <span class="copied-dialog hidden relative rounded-md bg-green-600 dark:bg-green-700 py-0 px-2 text-white mr-[-8px]">
              Copied
              <span class="w-1.5 h-1.5 bg-green-600 dark:bg-green-700 rotate-45 absolute left-full top-1/2 -translate-y-1/2 ml-[-3px]" />
            </span>
            <span class="copy-dialog hidden relative rounded-md bg-neutral-500 py-0 px-2 text-white mr-[-8px]">
              Copy
              <span class="w-1.5 h-1.5 bg-neutral-500 rotate-45 absolute left-full top-1/2 -translate-y-1/2 ml-[-3px]" />
            </span>
            <button
              class="copy-button h-full flex items-center justify-center p-2 px-4
          fill-black/60 dark:fill-white/60
          hover:fill-black/80 hover:dark:fill-white/80
          copied:fill-black/80 copied:dark:fill-white/80"
              aria-label="copy"
            >
              <>
                <svg class="copy-svg copy-svg-active size-3.5 aspect-square">
                  <use href={getURL("ui.svg#copy-filled")} />
                </svg>
                <svg class="copy-svg copy-svg-inactive size-3.5 aspect-square">
                  <use href={getURL("ui.svg#copy-open")} />
                </svg>
                <svg class="copy-svg copy-svg-copied size-3.5 aspect-square fill-green-600">
                  <use href={getURL("ui.svg#square-check")} />
                </svg>
              </>
            </button>
          </div>
        )}
      </figcaption>
    )
  }
  <pre {...props}><slot /></pre>
</figure>

<style define:vars={{ counter_start: lines_start }}>
  .copy-button {
    pointer-events: auto;
  }

  .copy-button,
  .active .copy-svg-inactive {
    display: none;
  }

  .copy-button,
  .active .copy-svg-active {
    display: block;
  }

  .copy-svg-active {
    display: none;
  }

  .copy-svg-copied {
    display: none;
  }

  .copy-dialog:has(+ .copy-button:hover) {
    display: block;
  }

  .astro-code {
    border-radius: 0;
    background-color: transparent !important;
    padding-inline: 0;
    padding-block: 6px;
  }

  :global(.astro-code code) {
    /* Define a counter for each <code> inside .astro-code */
    counter-reset: step;
    /* Start from zero, increment the counter */
    counter-increment: step var(--counter_start);

    width: fit-content;
    min-width: 100%;
    display: block;
  }

  /* :global(.astro-code code > :last-child) {
    display: none !important;
  } */

  :global(.astro-code code .line) {
    display: inline-block;
    width: 100%;
    padding-right: 1rem;
  }

  :global(.astro-code code .line::before) {
    content: counter(step);
    counter-increment: step;
    display: inline-block;
    text-align: right;

    /* Fix element position during horizontal scroll */
    position: sticky;
    left: 0;
    z-index: 1;

    pointer-events: none;

    @apply bg-neutral-50 dark:bg-neutral-950 text-black/25 dark:text-white/25 px-4 w-12;
  }

  :global(.astro-code code .line.highlighted) {
    background-color: oklch(95.03% 0.0017 247.84);

    @apply dark:bg-neutral-800;
  }

  :global(.astro-code code .line.highlighted::before) {
    background-color: oklch(95.03% 0.0017 247.84);
    @apply dark:bg-neutral-800 border-l-2 border-blue-500;
  }
</style>

<script is:inline define:vars={{ copy_ui_id, code_text }}>
  if (!copy_ui_id) return;
  const copiedIconDuration = 850; // Change this to customize the display duration (in milliseconds)

  let isActive = false;
  var copy_ui;
  var button;
  var activeIcon;
  var inactiveIcon;
  var copiedIcon;
  var copiedDialog;
  var copyDialog;

  function initializeCopyButton() {
    if (!copy_ui_id) return;
    copy_ui = document.getElementById(copy_ui_id);
    if (!copy_ui) return;
    button = copy_ui.querySelector(".copy-button");
    activeIcon = copy_ui.querySelector(".copy-svg-active");
    inactiveIcon = copy_ui.querySelector(".copy-svg-inactive");
    copiedIcon = copy_ui.querySelector(".copy-svg-copied");
    copiedDialog = copy_ui.querySelector(".copied-dialog");
    copyDialog = copy_ui.querySelector(".copy-dialog");
    isActive = false;

    button.addEventListener("mousedown", () => {
      button.classList.add("active");
      isActive = true;
    });

    button.addEventListener("mouseleave", () => {
      button.classList.remove("active");
      isActive = false;
    });

    button.addEventListener("mouseup", () => {
      if (isActive) {
        navigator.clipboard.writeText(code_text);
        showCopiedIcon();
      }

      button.classList.remove("active");
      isActive = false;
    });
  }

  const showCopiedIcon = () => {
    // Show copied icon
    activeIcon.style.display = "none";
    inactiveIcon.style.display = "none";
    copiedIcon.style.display = "block";
    copiedDialog.style.display = "block";
    copyDialog.style.display = "none";

    setTimeout(() => {
      // Reset icon visibility
      activeIcon.style.display = "";
      inactiveIcon.style.display = "";
      copiedIcon.style.display = "";
      copiedDialog.style.display = "";
      copyDialog.style.display = "";
    }, copiedIconDuration);
  };

  initializeCopyButton();
  document.addEventListener("astro:page-load", initializeCopyButton);
</script>
